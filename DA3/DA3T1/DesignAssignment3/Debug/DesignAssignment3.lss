
DesignAssignment3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000001ef  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bc1  00000000  00000000  0000021d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008dc  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ab  00000000  00000000  000016ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001968  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000318  00000000  00000000  0000198c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000048  00000000  00000000  00001ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001cec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  0000013e  0000013e  000001b2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.main    0000005c  000000cc  000000cc  00000140  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__dummy_fini 00000002  00000146  00000146  000001ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.__dummy_funcs_on_exit 00000002  00000148  00000148  000001bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.__dummy_simulator_exit 00000002  0000014a  0000014a  000001be  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.exit    00000016  00000128  00000128  0000019c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text._Exit   00000004  00000142  00000142  000001b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
   c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  10:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  14:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  18:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  1c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  20:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  24:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  28:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  2c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  30:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  34:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  38:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  3c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  40:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  44:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  48:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  4c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  50:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  54:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  58:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  5c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  60:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  64:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  68:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  6c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  70:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  74:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  78:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  7c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  80:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  84:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  88:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  8c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  90:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  94:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  98:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  9c:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a4:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  a8:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  ac:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>
  b0:	0c 94 9f 00 	jmp	0x13e	; 0x13e <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	0e 94 66 00 	call	0xcc	; 0xcc <_etext>
  c4:	0c 94 94 00 	jmp	0x128	; 0x128 <exit>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>

Disassembly of section .text:

0000013e <__bad_interrupt>:
 13e:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.main:

000000cc <main>:

#define DELAY_125US_COUNT 12000 // 1.5 sec delay

int main(void)
{
	DDRB |= (1 << PINB5); //Set PB5 as LED output
  cc:	84 b1       	in	r24, 0x04	; 4
  ce:	80 62       	ori	r24, 0x20	; 32
  d0:	84 b9       	out	0x04, r24	; 4
	
	
    while(1)
    {
		// Turn on LED
        PORTB |= (1 << PINB5);
  d2:	85 b1       	in	r24, 0x05	; 5
  d4:	80 62       	ori	r24, 0x20	; 32
  d6:	85 b9       	out	0x05, r24	; 5
		for (uint16_t i = 0; i < DELAY_125US_COUNT; i++)
  d8:	20 e0       	ldi	r18, 0x00	; 0
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <main+0x28>
		{
			TCNT0 = 6; // Load 6 into TCNT0 to count 250 ticks
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	86 bd       	out	0x26, r24	; 38
			TIFR0 |= (1 << TOV0); // Clear timer0 overflow flag
  e2:	85 b3       	in	r24, 0x15	; 21
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	85 bb       	out	0x15, r24	; 21
			TCCR0B = (1 << CS01); // Start Timer0 with prescaler = 8
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	85 bd       	out	0x25, r24	; 37
			// Wait for 125 us
			while (!(TIFR0 & (1 << TOV0)));
  ec:	a8 9b       	sbis	0x15, 0	; 21
  ee:	fe cf       	rjmp	.-4      	; 0xec <main+0x20>
	
    while(1)
    {
		// Turn on LED
        PORTB |= (1 << PINB5);
		for (uint16_t i = 0; i < DELAY_125US_COUNT; i++)
  f0:	2f 5f       	subi	r18, 0xFF	; 255
  f2:	3f 4f       	sbci	r19, 0xFF	; 255
  f4:	20 3e       	cpi	r18, 0xE0	; 224
  f6:	8e e2       	ldi	r24, 0x2E	; 46
  f8:	38 07       	cpc	r19, r24
  fa:	88 f3       	brcs	.-30     	; 0xde <main+0x12>
			TCCR0B = (1 << CS01); // Start Timer0 with prescaler = 8
			// Wait for 125 us
			while (!(TIFR0 & (1 << TOV0)));
		}
		
		PORTB &= ~(1 << PINB5); // Turn off LED
  fc:	85 b1       	in	r24, 0x05	; 5
  fe:	8f 7d       	andi	r24, 0xDF	; 223
 100:	85 b9       	out	0x05, r24	; 5
		for (uint16_t i = 0; i < DELAY_125US_COUNT; i++)
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	30 e0       	ldi	r19, 0x00	; 0
 106:	0b c0       	rjmp	.+22     	; 0x11e <main+0x52>
		{
			TCNT0 = 6; // Load 6 into TCNT0 to count 250 ticks
 108:	86 e0       	ldi	r24, 0x06	; 6
 10a:	86 bd       	out	0x26, r24	; 38
			TIFR0 |= (1 << TOV0); // Clear timer0 overflow flag
 10c:	85 b3       	in	r24, 0x15	; 21
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	85 bb       	out	0x15, r24	; 21
			TCCR0B = (1 << CS01); // Start Timer0 with prescaler = 8
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	85 bd       	out	0x25, r24	; 37
			// Wait for 125 us
			while (!(TIFR0 & (1 << TOV0)));
 116:	a8 9b       	sbis	0x15, 0	; 21
 118:	fe cf       	rjmp	.-4      	; 0x116 <main+0x4a>
			// Wait for 125 us
			while (!(TIFR0 & (1 << TOV0)));
		}
		
		PORTB &= ~(1 << PINB5); // Turn off LED
		for (uint16_t i = 0; i < DELAY_125US_COUNT; i++)
 11a:	2f 5f       	subi	r18, 0xFF	; 255
 11c:	3f 4f       	sbci	r19, 0xFF	; 255
 11e:	20 3e       	cpi	r18, 0xE0	; 224
 120:	8e e2       	ldi	r24, 0x2E	; 46
 122:	38 07       	cpc	r19, r24
 124:	88 f3       	brcs	.-30     	; 0x108 <main+0x3c>
 126:	d5 cf       	rjmp	.-86     	; 0xd2 <main+0x6>

Disassembly of section .text.__dummy_fini:

00000146 <_fini>:
 146:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

00000148 <__funcs_on_exit>:
 148:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000014a <__simulator_exit>:
 14a:	08 95       	ret

Disassembly of section .text.exit:

00000128 <exit>:
 128:	ec 01       	movw	r28, r24
 12a:	0e 94 a4 00 	call	0x148	; 0x148 <__funcs_on_exit>
 12e:	0e 94 a3 00 	call	0x146	; 0x146 <_fini>
 132:	ce 01       	movw	r24, r28
 134:	0e 94 a5 00 	call	0x14a	; 0x14a <__simulator_exit>
 138:	ce 01       	movw	r24, r28
 13a:	0e 94 a1 00 	call	0x142	; 0x142 <_Exit>

Disassembly of section .text._Exit:

00000142 <_Exit>:
 142:	0e 94 64 00 	call	0xc8	; 0xc8 <_exit>
